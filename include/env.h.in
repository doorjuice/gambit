#ifndef ENV_H
#define ENV_H

/*
 * This section determines the following characteristics of the target
 * platform:
 *
 *  - target operating system (WIN32, POSIX, etc)
 *  - target processor type (x86, PowerPC, etc)
 *  - byte order endianness (big-endian or little-endian)
 *  - width of the integer and floating-point types (char, short, int, etc)
 */

/*
 * Determine the target operating system type.  This is used mainly in
 * the implementation of operating system dependent runtime library
 * functions (i.e. lib/os*.c), but also to handle some OS quirks in
 * this include file.
 */

#ifdef _WIN32
#define ___OS_WIN32
#endif

/*
 * Determine the target processor type.  This is used for dynamic code
 * generation (to convert Scheme procedures into C functions) and to
 * determine byte order endianness.
 */

#ifndef ___CPU_x86_32

#ifdef I386
#define ___CPU_x86_32
#else
#ifdef _I386
#define ___CPU_x86_32
#else
#ifdef i386
#define ___CPU_x86_32
#else
#ifdef _i386
#define ___CPU_x86_32
#else
#ifdef __i386
#define ___CPU_x86_32
#else
#ifdef __i386__
#define ___CPU_x86_32
#else
#ifdef __i486
#define ___CPU_x86_32
#else
#ifdef __i486__
#define ___CPU_x86_32
#else
#ifdef __i586
#define ___CPU_x86_32
#else
#ifdef __i586__
#define ___CPU_x86_32
#else
#ifdef __i686
#define ___CPU_x86_32
#else
#ifdef __i686__
#define ___CPU_x86_32
#else
#ifdef __ix86
#define ___CPU_x86_32
#else
#ifdef M_I386
#define ___CPU_x86_32
#else
#ifdef _M_I386
#define ___CPU_x86_32
#else
#ifdef M_I86
#define ___CPU_x86_32
#else
#ifdef _M_I86
#define ___CPU_x86_32
#else
#ifdef _M_IX86
#define ___CPU_x86_32
#else
#ifdef _X86_
#define ___CPU_x86_32
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif

#ifdef ___CPU_x86_32
#define ___CPU_x86
#endif

#endif

#ifndef ___CPU_x86_64

#ifdef __x86_64__
#define ___CPU_x86_64
#else
#ifdef _M_AMD64
#define ___CPU_x86_64
#endif
#endif

#ifdef ___CPU_x86_64
#define ___CPU_x86
#endif

#endif

#ifndef ___CPU_ppc_32

#ifdef PPC
#define ___CPU_ppc_32
#else
#ifdef ppc
#define ___CPU_ppc_32
#else
#ifdef __ppc
#define ___CPU_ppc_32
#else
#ifdef __ppc__
#define ___CPU_ppc_32
#else
#ifdef _ARCH_PPC
#define ___CPU_ppc_32
#else
#ifdef __POWERPC__
#define ___CPU_ppc_32
#else
#ifdef powerpc
#define ___CPU_ppc_32
#else
#ifdef _POWER
#define ___CPU_ppc_32
#else
#ifdef _ARCH_PWR
#define ___CPU_ppc_32
#else
#ifdef _ARCH_PWR2
#define ___CPU_ppc_32
#else
#ifdef _M_PPC
#define ___CPU_ppc_32
#else
#ifdef _M_MPPC
#define ___CPU_ppc_32
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif

#ifdef ___CPU_ppc_32
#define ___CPU_ppc
#endif

#endif

#ifndef ___CPU_ppc_64

#ifdef __ppc_64__
#define ___CPU_ppc_64
#endif

#ifdef ___CPU_ppc_64
#define ___CPU_ppc
#endif

#endif

#ifndef ___CPU_sparc

#ifdef SPARC
#define ___CPU_sparc
#else
#ifdef __sparc
#define ___CPU_sparc
#else
#ifdef __sparc__
#define ___CPU_sparc
#else
#ifdef sparc
#define ___CPU_sparc
#else
#ifdef sparc64
#define ___CPU_sparc
#else
#ifdef sparclite
#define ___CPU_sparc
#endif
#endif
#endif
#endif
#endif
#endif

#endif

#ifndef ___CPU_alpha

#ifdef alpha
#define ___CPU_alpha
#else
#ifdef __alpha
#define ___CPU_alpha
#else
#ifdef __alpha__
#define ___CPU_alpha
#else
#ifdef ALPHA
#define ___CPU_alpha
#else
#ifdef _ALPHA_
#define ___CPU_alpha
#else
#ifdef __ALPHA
#define ___CPU_alpha
#else
#ifdef _M_ALPHA
#define ___CPU_alpha
#endif
#endif
#endif
#endif
#endif
#endif
#endif

#endif

#ifndef ___CPU_mips

#ifdef mips
#define ___CPU_mips
#else
#ifdef _mips
#define ___CPU_mips
#else
#ifdef __mips
#define ___CPU_mips
#else
#ifdef __mips__
#define ___CPU_mips
#else
#ifdef MIPSEB
#define ___CPU_mips
#else
#ifdef _MIPSEB
#define ___CPU_mips
#else
#ifdef __MIPSEB
#define ___CPU_mips
#else
#ifdef __MIPSEB__
#define ___CPU_mips
#else
#ifdef MIPSEL
#define ___CPU_mips
#else
#ifdef _MIPSEL
#define ___CPU_mips
#else
#ifdef __MIPSEL
#define ___CPU_mips
#else
#ifdef __MIPSEL__
#define ___CPU_mips
#else
#ifdef _M_MRX000
#define ___CPU_mips
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif
#endif

#endif

#ifndef ___CPU_arm

#ifdef arm
#define ___CPU_arm
#else
#ifdef __arm
#define ___CPU_arm
#else
#ifdef __arm__
#define ___CPU_arm
#else
#endif
#endif
#endif

#endif

#ifndef ___CPU_vax

#ifdef vax
#define ___CPU_vax
#else
#ifdef __vax
#define ___CPU_vax
#else
#ifdef __vax__
#define ___CPU_vax
#endif
#endif
#endif

#endif

#ifdef __aarch64__
#define ___CPU_aarch64
#else
#ifdef __arm64__
#define ___CPU_aarch64
#endif
#endif

/*
 * Determine the byte order endianness based on the processor type.
 * We assume that all processors are big-endian, except the x86, x86_64,
 * alpha and vax.  The PowerPC, MIPS and ARM can be either big-endian or
 * little-endian so extra tests are needed.
 */

#ifndef ___BIG_ENDIAN
#ifndef ___LITTLE_ENDIAN

#ifdef ___CPU_x86
#define ___LITTLE_ENDIAN
#endif

#ifdef ___CPU_ppc
#ifdef _LITTLE_ENDIAN
#define ___LITTLE_ENDIAN
#endif
#ifdef __LITTLE_ENDIAN__
#define ___LITTLE_ENDIAN
#endif
#ifdef __LITTLE_ENDIAN_DATA__
#define ___LITTLE_ENDIAN
#endif
#endif

#ifdef ___CPU_alpha
#define ___LITTLE_ENDIAN
#endif

#ifdef ___CPU_mips
#ifdef _MIPSEL
#define ___LITTLE_ENDIAN
#endif
#endif

#ifdef ___CPU_arm
#ifdef _LITTLE_ENDIAN
#define ___LITTLE_ENDIAN
#endif
#ifdef __LITTLE_ENDIAN__
#define ___LITTLE_ENDIAN
#endif
#ifdef __LITTLE_ENDIAN_DATA__
#define ___LITTLE_ENDIAN
#endif
#ifdef __ARMEL__
#define ___LITTLE_ENDIAN
#endif
#endif

#ifdef ___CPU_vax
#define ___LITTLE_ENDIAN
#endif

#ifdef EMSCRIPTEN
#define ___LITTLE_ENDIAN
#endif

/* AArch64 can be little or big endian*/
#ifdef __AARCH64EL__
#define ___LITTLE_ENDIAN
#endif

#ifndef ___LITTLE_ENDIAN
#define ___BIG_ENDIAN
#endif

#endif
#endif


/*---------------------------------------------------------------------------*/

/* Dependencies on language (i.e. C++, ANSI-C, and K&R C). */

#ifdef __cplusplus

#define ___P(ansi,kr)ansi
#define ___PVOID ()

#define ___BEGIN_C_LINKAGE extern "C" {
#define ___END_C_LINKAGE }

/*
 * Define ___BOOL as "bool" or "int", according to what is supported
 * by the compiler (this is determined by the configure script) unless
 * it is defined elsewhere.
 */

#ifndef ___BOOL
#define ___BOOL @CONF_BOOL@
#endif

#define ___USE_CPLUSPLUS_NEW_DELETE
#define ___USE_CPLUSPLUS_CLEANUP

#else

#ifdef __STDC__

#define ___P(ansi,kr)ansi
#define ___PVOID (void)

#else

#define ___P(ansi,kr)kr
#define ___PVOID ()

#endif

#define ___BEGIN_C_LINKAGE
#define ___END_C_LINKAGE

#ifndef ___BOOL
#define ___BOOL int
#endif

#undef ___USE_SETJMP
#define ___USE_SETJMP

#endif


#ifdef ___USE_SETJMP

#ifdef ___DONT_HAVE_SETJMP_H

/*
 * If the file "setjmp.h" is not available then the symbol
 * ___DONT_HAVE_SETJMP_H must be defined (for example on the compiler's
 * command line).  In this case we assume that setjmp is defined as
 * a macro.
 */

#undef ___CAN_IMPORT_SETJMP_DYNAMICALLY
#define ___CAN_IMPORT_SETJMP_DYNAMICALLY

#else

/*
 * If the file "setjmp.h" is available then we can use the C
 * preprocessor to check if setjmp is a macro (otherwise it has to be
 * a function).  If it is a macro then we can't get a pointer to it!
 */

#include <setjmp.h>

#ifdef setjmp
#undef ___CAN_IMPORT_SETJMP_DYNAMICALLY
#define ___CAN_IMPORT_SETJMP_DYNAMICALLY
#endif

#endif

#endif

#endif

